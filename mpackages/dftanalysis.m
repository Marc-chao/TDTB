(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["dftanalysis`"]
Unprotect@@Names["dftanalysis`*"];
ClearAll@@Names["dftanalysis`*"];


GetLatticeFromOUTCAR::usage="{directlatticevecs,reclatticevecs}=GetLatticeFromOUTCAR[file] reads the VASP OUTCAR file and returns the direct lattice vectors and the reciprocal lattice vectors."
ShiftPlotData::usage="ShiftPlotData[plotdata,shift] shifts the plot data, generated with CreateTBPlotData, by a given energy."
CreateVaspBandstructurePlotData::usage="{plotdata,path,puredata}=CreateVaspBandstructurePlotData[file] reads a VASP EIGENVAL file and returns data that can be plotted with ListPlot, the path in reciprocal space (in cartesian coordinates) and the eigenvalues grouped by k-point."
CreateVaspBandstructurePlotDataSpinDep::usage="{plotdataspin1,plotdataspin2,path,puredata}=CreateVaspBandstructurePlotDataSpinDep[file] reads a VASP EIGENVAL file and returns data that can be plotted with ListPlot, the path in reciprocal space (in cartesian coordinates) and the eigenvalues grouped by k-point (last may not work, check again!)."
CreateTBPlotData::usage="CreateTBPlotData[function,path,substlist,nbands] creates a List, plottable with ListPlot, containing the band structure given by an orthogonal 2D-Bloch-Hamiltonian f[kx,ky] along a path (generated by CreateTBPathfrom2DVaspPath or similar), replacing additional parameters according to substlist. nbands is the number of bands to calculate. The function uses parallelization."
PlotVaspBandstructure::usage="PlotVaspBandstructure[file] plots a band structure, given by a VASP EIGENVAL file.
PlotVaspBandstructure[file,plotstyle] takes a PlotStyle parameter."
CreateTBPlotData3D::usage="CreateTBPlotData3D[function,path,substlist,nbands] creates a List, plottable with ListPlot, containing the band structure given by an orthogonal 2D-Bloch-Hamiltonian f[kx,ky,kz] along a path (generated by CreateTBPathfrom3DVaspPath or similar), replacing additional parameters according to substlist. nbands is the number of bands to calculate. The function uses parallelization."
BlochMatrixFromWannier90::usage="{matrix,structureplot,nbands}=BlochMatrixFromWannier90[file,latticevecs,dropatend] takes the file path to the wannier90_hr.dat file, the two lattice vectors and the number of outermost cells to ignore. It returns the Bloch-Hamiltonian (containing kx and ky as variables), a plot of the cells and the number of the bands."
BlochMatrix3DFromWannier90::usage="{matrix,nbands}=BlochMatrix3DFromWannier90[file,latticevecs,dropatend] takes the file path to the wannier90_hr.dat file, the lattice vectors and the number of outermost cells to ignore. It returns the Bloch-Hamiltonian (containing kx, ky and kz as variables) and the number of the bands."
PlotPROCARParts::usage="PlotPROCARParts[file,atoms,orbitals,chargescaling] plots the portion of the DFT KS orbitals given by a list of orbitals. file is the path to the VASP PROCAR file, atoms is the list of atoms to include (e.g. 1;;7), orbitals ist the list of orbitals (e.g. 1;;9), chargescaling is a scaling factor (e.g. 1/100)."
CreateTBPathfrom2DVaspPath::usage="CreateTBPathfrom2DVaspPath[vasppath,recunitvecs] creates a path in the reciprocal space (in cartesian coordinates) from a VASP bandstructure. vasppath is the path generated by CreateVaspBandstructurePlotData (which is in direct coordinates), recunitvecs are the reciprocal unit vectors."
CreateTBPathfrom3DVaspPath::usage="CreateTBPathfrom3DVaspPath[vasppath,recunitvecs] creates a path in the reciprocal space (in cartesian coordinates) from a VASP bandstructure. vasppath is the path generated by CreateVaspBandstructurePlotData (which is in direct coordinates), recunitvecs are the reciprocal unit vectors."
EasyBlochMatrixFromWannier90::usage="EasyBlochMatrixFromWannier90[wannier90file,outcarfile] creates a Bloch Matrix (with parameters kx and ky as variables) from wannier90_hr.dat and OUTCAR input files."
EasyBlochMatrix3DFromWannier90::usage="EasyBlochMatrix3DFromWannier90[wannier90file,outcarfile] creates a Bloch Matrix (with parameters kx,ky and kz as variables) from wannier90_hr.dat and OUTCAR input files."
CompareVaspWannier90Bandstructure::usage="{vaspdata,wannier90bsdata}=CompareVaspWannier90Bandstructure[wannier90file,outcarfile,eigenvalfile] generates the bandstructure from a VASP calculation and a wannier90 calculation and returns data, plottable with ListPlot. Supply the paths to the files wannier90_hr.dat, OUTCAR and EIGENVAL."
CompareVaspWannier90Bandstructure3D::usage="{vaspdata,wannier90bsdata}=CompareVaspWannier90Bandstructure3D[wannier90file,outcarfile,eigenvalfile] generates the bandstructure from a VASP calculation and a wannier90 calculation and returns data, plottable with ListPlot. Supply the paths to the files wannier90_hr.dat, OUTCAR and EIGENVAL."
HamiltonianMatrixElementsFromWannier90::usage="{data,nbands}=HamiltonianMatrixElementsFromWannier90[file] returns the Hamiltonian matrix data contained in the file (as a list) and the number of bands."
ReadCONTCAR::usage="{atoms,latticevecs}=ReadCONTCAR[contcarfile] reads a VASP CONTCAR file (or a POSCAR file with the line \"Selective Dynamics\" and direct coordinates) and returns the positions of the atoms and the lattice vectors."

Begin["`Private`"]


PlotVaspBandstructure[path_]:=PlotVaspBandstructure[path,{}]
PlotVaspBandstructure[path_,plotstyle_]:=ListPlot[CreateVaspBandstructurePlotData[path][[1]],PlotStyle->plotstyle,PlotRange->All]


GetLatticeFromOUTCAR[path_]:=Module[{data,datapos,directlatticevecs,reclatticevecs},
data=Import[path,"Table"];
datapos=Last[Position[data,{"direct","lattice","vectors","reciprocal","lattice","vectors"}]][[1]];
directlatticevecs=data[[datapos+1;;datapos+3]][[All,1;;3]];
reclatticevecs=data[[datapos+1;;datapos+3]][[All,4;;6]];
{directlatticevecs,reclatticevecs}
]


(*2D/3D is both used and kind of mixed up*)

CreateTBPathfrom2DVaspPath[vasppath_(*VASP path in BZ,use path data generated by CreateVaspBandstructurePlotData*),recunitvecs_(*List of 2 reciprocal unit vectors,mind the ordering*)]:=Module[{vasppoints},vasppoints=#.recunitvecs&/@vasppath[[All,1;;2]];
Table[Join[{i},vasppoints[[i]]],{i,vasppoints//Length}]];

CreateTBPathfrom3DVaspPath[vasppath_(*VASP path in BZ,use path data generated by CreateVaspBandstructurePlotData*),recunitvecs_(*List of 3 reciprocal unit vectors,mind the ordering*)]:=Module[{vasppoints},vasppoints=#.recunitvecs&/@vasppath;
Table[Join[{i},vasppoints[[i]]],{i,vasppoints//Length}]];

CreateVaspBandstructurePlotData[pfad_]:=Module[{data,gridpoints,gridpoints2,toplot,bandnr,path,puredata},data=Import[pfad,"Table"];
bandnr=data[[6,3]];
gridpoints=Table[data[[n;;n+bandnr]],{n,8,Length[data],bandnr+2}];
gridpoints2=Map[Table[#[[n,2]],{n,2,Length[#]}]&,gridpoints];
toplot=Flatten[Table[{i,gridpoints2[[i,m]]},{i,Length[gridpoints2]},{m,Length[gridpoints2[[1]]]}],1];
path=gridpoints[[All,1,1;;3]];
puredata=gridpoints[[All,2;;bandnr+1]][[All,All,2]];
{toplot,path,puredata}
(*return value contains the data to plot ready for ListPlot (first list entry) as well as the path in the Brillouin zone (second list entry;
contains points {kx,ky,kz}).To plot the BS,use ListPlot[CreateVaspBandstructurePlotData[path][[1]]].The third entry contains only the eigenvalues grouped by k vector.*)];

ShiftPlotData[plotdata_,shift_]:=Table[{plotdata[[i,1]],plotdata[[i,2]]+shift},{i,plotdata//Length}];(*constant shift for BS*)

(*norbital2 und basissize mit nbands ersetzt!!*)
CreateTBPlotData[function_(*Function f[kx,ky] that generates Hamiltonian as a function of k*),path_(*Path through Brillouin zone,List of {kx,ky}*),substlist_(*Hamiltonian function variable substitution list*),nbands_]:=Module[{tmp},
Flatten[Map[Transpose[{Table[#[[1]],{nbands}],Eigenvalues[function[#[[2]],#[[3]] ]/.substlist ]} ]&,path]//Chop,1]
];(*creates Band structure data from Hamiltonian and path,plottable with ListPlot*)

CreateTBPlotData3D[function_(*Function f[kx,ky] that generates Hamiltonian as a function of k*),path_(*Path through Brillouin zone,List of {kx,ky}*),substlist_(*Hamiltonian function variable substitution list*),nbands_]:=Module[{tmp},
Flatten[Map[Transpose[{Table[#[[1]],{nbands}],Eigenvalues[function[#[[2]],#[[3]],#[[4]] ]/.substlist ]} ]&,path]//Chop,1]
];(*creates Band structure data from Hamiltonian and path,plottable with ListPlot*)

(*same thing,but with overlap matrix*)CreateNOTBPlotData[function_(*Function f[kx,ky] that generates Hamiltonian as a function of k*),SMatrix_(*Overlap Matrix*),path_(*Path through Brillouin zone,List of {kx,ky}*),substlist_(*Hamiltonian function variable substitution list*),BasisSize_,Norbital2_]:=Module[{tmp,tmp2},tmp=function[kx,ky]/.substlist;
tmp2=SMatrix[kx,ky]/.substlist;
Partition[Flatten[Chop[ParallelMap[Transpose[{Table[#[[1]],{Norbital2*BasisSize}],Eigenvalues[{(tmp/.{kx->#[[2]],ky->#[[3]]})//Chop,(tmp2/.{kx->#[[2]],ky->#[[3]]})//Chop}]//Sort}]&,path]]],2]];

CreateTBdataForFit[path_(*Path through Brillouin zone,List of {kx,ky}*),substlist_(*Hamiltonian function variable substitution list*)]:=Block[{tmp,tmp2},tmp=Bloch[kx,ky]/.substlist;
tmp2=path[[All,{2,3}]];
ParallelMap[(Eigenvalues[(tmp/.{kx->#[[1]],ky->#[[2]]})//Chop]//Sort)&,tmp2(*,Method->"CoarsestGrained"*)]//Chop](*creates Band structure data from Hamiltonian and path,plottable with ListPlot*)

CreateNOTBdataForFit[path_(*Path through Brillouin zone,List of {kx,ky}*),substlist_(*Hamiltonian function variable substitution list*)]:=Block[{tmp,tmp2,tmp3},tmp=Bloch[kx,ky]/.substlist;
tmp3=BlochOverlap[kx,ky]/.substlist;
tmp2=path[[All,{2,3}]];
ParallelMap[(Eigenvalues[{(tmp/.{kx->#[[1]],ky->#[[2]]})//Chop,tmp3/.{kx->#[[1]],ky->#[[2]]}//Chop}]//Sort)&,tmp2(*,Method->"CoarsestGrained"*)]//Chop](*creates Band structure data from Hamiltonian and path,plottable with ListPlot*)

BandsOverallFitParameter[bandnr_,path_,parlist_,vasppuredata_,tbpuredatafct_]:=Norm[vasppuredata[[All,bandnr]]-tbpuredatafct[path,parlist][[All,bandnr]]]

SpecialFitWithDiracConeParameter[bandnr_,path_,parlist_,vasppuredata_,tbpuredatafct_]:=Module[{tb},(tb=tbpuredatafct[path,parlist];
Norm[vasppuredata[[All,bandnr]]-tb[[All,bandnr]]]+Norm[vasppuredata[[70;;180,4;;5]]-tb[[70;;180,4;;5]]])];

SpecialFitWithDiracConeParameter2[bandnr_,path_,parlist_,vasppuredata_,tbpuredatafct_](*smaller part of the 5th band*):=Module[{tb},(tb=tbpuredatafct[path,parlist];
Norm[vasppuredata[[All,bandnr]]-tb[[All,bandnr]]]+Norm[vasppuredata[[90;;110,4;;5]]-tb[[90;;110,4;;5]]])];


ReadCONTCAR[contcarfile_]:=Module[{latticeconst,latticevecs,nratoms,atomsdirect,atoms},
poscar=Import[contcarfile,"Table"];
latticeconst=poscar[[2,1]];
latticevecs=latticeconst poscar[[3;;5]];
nratoms=Plus@@poscar[[7]];
atomsdirect=poscar[[10;;10+nratoms-1]];
atoms=Table[atomsdirect[[i,1]] latticevecs[[1]]+
atomsdirect[[i,2]] latticevecs[[2]]+
atomsdirect[[i,3]] latticevecs[[3]],{i,Length[atomsdirect]}];
{atoms,latticevecs}
];


CreateVaspBandstructurePlotDataSpinDep[pfad_]:=Module[{data,gridpoints,energy,toplot,bandnr,path,puredata,energy2,toplot2},data=Import[pfad,"Table"];
bandnr=data[[6,3]];
gridpoints=Table[data[[n;;n+bandnr]],{n,8,Length[data],bandnr+2}];
energy=Map[Table[#[[n,2]],{n,2,Length[#]}]&,gridpoints];
energy2=Map[Table[#[[n,3]],{n,2,Length[#]}]&,gridpoints];
toplot=Flatten[Table[{i,energy[[i,m]]},{i,Length[energy]},{m,Length[energy[[1]]]}],1];
toplot2=Flatten[Table[{i,energy2[[i,m]]},{i,Length[energy2]},{m,Length[energy2[[1]]]}],1];
path=gridpoints[[All,1,1;;3]];
puredata=gridpoints[[All,2;;bandnr+1]][[All,All,2]];
{toplot,toplot2,path,puredata}
(*return value contains the data to plot ready for ListPlot (first list entry) as well as the path in the Brillouin zone (second list entry;contains points {kx,ky,kz}).To plot the BS,use ListPlot[CreateVaspBandstructurePlotData[path][[1]]].The third entry contains only the eigenvalues grouped by k vector.*)];


SortBSDataForListLinePlot[bsdata_,baender_,kpunkte_]:=Table[bsdata[[j]],{i,baender},{j,i,baender kpunkte,baender}]


VaspProjectionDataFromFile[pfad_]:=Module[{data,kpunkte,baender,atome,kpunktstart,bandstart,atomzeile,atomdata,projectiondata,projectiondata2,singleatom},
data=Import[pfad,"Table"];

kpunkte=data[[2,4]];
baender=data[[2,8]];
atome=data[[2,12]];

singleatom=If[atome==1,1,0];
(*alle zaehler beginnen mit 1*)
kpunktstart[i_(*kpunkt*)]:=4+(i-1) ((5-singleatom+atome) baender+3);
bandstart[i_(*kpunkt*),j_(*band*)]:=kpunktstart[i]+2+(j-1) (atome+5-singleatom);
atomzeile[i_(*kpunkt*),j_(*band*),k_(*atom*)]:=bandstart[i,j]+2+k;

atomdata[data_,i_(*kpunkt*),j_(*band*),k_(*atom*)]:=data[[atomzeile[i,j,k]]]//Rest//Most;

projectiondata=Table[Append[atomdata[data,i,j,k],data[[bandstart[i,j],5]]],{i,kpunkte},{j,baender},{k,atome}];
{projectiondata,kpunkte,baender,atome}
]


VaspProjectionDataFromFileSpinDep[pfad_]:=Module[{data,kpunkte,baender,atome,kpunktstart,bandstart,atomzeile,kpunktstart2,bandstart2,atomzeile2,atomdata,atomdata2,projectiondata,projectiondata2},
data=Import[pfad,"Table"];

kpunkte=data[[2,4]];
baender=data[[2,8]];
atome=data[[2,12]];

(*alle zaehler beginnen mit 1*)
kpunktstart[i_(*kpunkt*)]:=4+(i-1) ((5+atome) baender+3);
bandstart[i_(*kpunkt*),j_(*band*)]:=kpunktstart[i]+2+(j-1) (atome+5);
atomzeile[i_(*kpunkt*),j_(*band*),k_(*atom*)]:=bandstart[i,j]+2+k;

kpunktstart2[i_(*kpunkt*)]:=kpunktstart[kpunkte+i]+1;
bandstart2[i_(*kpunkt*),j_(*band*)]:=kpunktstart2[i]+2+(j-1) (atome+5);
atomzeile2[i_(*kpunkt*),j_(*band*),k_(*atom*)]:=bandstart2[i,j]+2+k;

atomdata[data_,i_(*kpunkt*),j_(*band*),k_(*atom*)]:=data[[atomzeile[i,j,k]]]//Rest//Most;
atomdata2[data_,i_(*kpunkt*),j_(*band*),k_(*atom*)]:=data[[atomzeile2[i,j,k]]]//Rest//Most;


projectiondata=Table[Append[atomdata[data,i,j,k],data[[bandstart[i,j],5]]],{i,kpunkte},{j,baender},{k,atome}];
projectiondata2=Table[Append[atomdata2[data,i,j,k],data[[bandstart2[i,j],5]]],{i,kpunkte},{j,baender},{k,atome}];
{projectiondata,projectiondata2,kpunkte,baender,atome}
]


PlotPROCARParts[file_,atoms_(*Liste*),orbitals_(*Liste*),chargescaling_]:=Module[{numbers,procar2dplotdata,content,nrbands,pos,projectiondata},
projectiondata=VaspProjectionDataFromFile[file][[1]];
nrbands=projectiondata[[1]]//Length;

numbers=Range[Length[projectiondata]];
procar2dplotdata=Table[pos={numbers,projectiondata[[All,band,1,10]]}//Transpose;
content=PointSize[# chargescaling]&/@(Apply[Plus,Apply[Plus,#]]&/@projectiondata[[All,band,atoms(*atomnummern*),orbitals(*orbitalnummern*)]]);
Flatten[Transpose[{ConstantArray[Hue[band/10.,1,0.8],Length[projectiondata]],content,Point/@pos}],1],{band,nrbands}];
procar2dplotdata
];


BandPlotDataFromPROCARData[projectiondata_]:=Table[projectiondata[[All,i,1,10]],{i,projectiondata[[1]]//Length}]


UnitCellSplit[data_]:=GatherBy[data,#[[1;;3]]&];
FindUnitCells[data_,cellids_]:=Select[UnitCellSplit[data],MemberQ[cellids,#[[1,1;;3]]]&];
UseBands[data_,bandnrs_](*Span;;doesn't work for MemberQ,so use explicit Band Nr list or Range[]*):=Select[data,MemberQ[bandnrs,#[[4]]]&&MemberQ[bandnrs,#[[5]]]&]
GetUnitCells[data_]:=Union[data[[All,1;;3]]];
UnitCells2GrapheneLattice[unitcells_,latticeveca_,latticevecb_]:=Flatten[{#+1/3 (latticeveca+latticevecb),#+2/3 (latticeveca+latticevecb)}&/@(latticeveca #[[1]]+latticevecb #[[2]]&/@unitcells),1]


BlochMatrixFromWannier90[file_,latticevecs_,dropatend_]:=Module[{data,rawdata,nbands,allunitcells,hoppingvalues,elementnumbers,matrixasvector,matrix,en,structureplot,linestart,BlochH},
rawdata=Import[file,"Table"];
nbands=rawdata[[2,1]];
linestart=Ceiling[rawdata[[3,1]]/15]+4;
data=rawdata[[linestart;;]];
allunitcells=SortBy[UnitCellSplit[data][[All,1,All]][[All,1;;3]],Norm[#,1]&];
hoppingvalues=FindUnitCells[data,Drop[allunitcells,-dropatend]];
elementnumbers=hoppingvalues[[1]][[All,4;;5]];
en=elementnumbers;
BlochH[kx_,ky_]:=Block[{},
matrixasvector=Sum[(#[[6]]+I #[[7]]) Exp[I {kx,ky}.(latticevecs[[1,1;;2]] #[[1]]+latticevecs[[2,1;;2]] #[[2]])]&/@hoppingvalues[[i]],{i,hoppingvalues//Length}]//Chop;
matrix=Table[0,{i,nbands},{j,nbands}];
Do[matrix[[en[[i,1]],en[[i,2]]]]=matrixasvector[[i]],{i,elementnumbers//Length}];
matrix
];
structureplot=ListPlot[{UnitCells2GrapheneLattice[allunitcells[[All,1;;2]],latticevecs[[1,1;;2]],latticevecs[[2,1;;2]]],UnitCells2GrapheneLattice[Drop[allunitcells,-dropatend][[All,1;;2]],latticevecs[[1,1;;2]],latticevecs[[2,1;;2]]]},AspectRatio->1,PlotRange->{{-30,30},{-30,30}},PlotStyle->PointSize[Large]];
{BlochH,structureplot,nbands}
];

HamiltonianMatrixElementsFromWannier90[file_]:=Module[{rawdata,nbands,linestart,allunitcells,data},
rawdata=Import[file,"Table"];
nbands=rawdata[[2,1]];
linestart=Ceiling[rawdata[[3,1]]/15]+4;
data=rawdata[[linestart;;]];
{data,nbands}
];

BlochMatrix3DFromWannier90[file_,latticevecs_,dropatend_]:=Module[{data,rawdata,nbands,allunitcells,hoppingvalues,elementnumbers,matrixasvector,matrix,en,structureplot,linestart,BlochH},
rawdata=Import[file,"Table"];
nbands=rawdata[[2,1]];
linestart=Ceiling[rawdata[[3,1]]/15]+4;
data=rawdata[[linestart;;]];
allunitcells=SortBy[UnitCellSplit[data][[All,1,All]][[All,1;;3]],Norm[#,1]&];
hoppingvalues=FindUnitCells[data,Drop[allunitcells,-dropatend]];
elementnumbers=hoppingvalues[[1]][[All,4;;5]];
en=elementnumbers;
BlochH[kx_,ky_,kz_]:=Block[{},
matrixasvector=Sum[(#[[6]]+I #[[7]]) Exp[I {kx,ky,kz}.(latticevecs[[1]] #[[1]]+latticevecs[[2]] #[[2]]+latticevecs[[3]] #[[3]])]&/@hoppingvalues[[i]],{i,hoppingvalues//Length}]//Chop;
matrix=Table[0,{i,nbands},{j,nbands}];
Do[matrix[[en[[i,1]],en[[i,2]]]]=matrixasvector[[i]],{i,elementnumbers//Length}];
matrix
];
{BlochH,nbands}
];


EasyBlochMatrixFromWannier90[wannier90file_,outcarfile_]:=Module[{matrix,lattice,reclattice,structureplot,nbands},
{lattice,reclattice}=GetLatticeFromOUTCAR[outcarfile];
{matrix,structureplot,nbands}=BlochMatrixFromWannier90[wannier90file,lattice,0];
matrix
];


EasyBlochMatrix3DFromWannier90[wannier90file_,outcarfile_]:=Module[{matrix,lattice,reclattice,nbands},
{lattice,reclattice}=GetLatticeFromOUTCAR[outcarfile];
{matrix,nbands}=BlochMatrix3DFromWannier90[wannier90file,lattice,0];
matrix
];


CompareVaspWannier90Bandstructure[wannier90file_,outcarfile_,eigenvalfile_]:=Module[{lattice,reclattice,vaspdata,vasppath,vasppuredata,path,blochh,structureplot,nbands,wannier90bsdata},
{lattice,reclattice}=GetLatticeFromOUTCAR[outcarfile];
{vaspdata,vasppath,vasppuredata}=CreateVaspBandstructurePlotData[eigenvalfile];
path=CreateTBPathfrom2DVaspPath[vasppath,2\[Pi] reclattice[[1;;2,1;;2]]];
{blochh,structureplot,nbands}=BlochMatrixFromWannier90[wannier90file,lattice,0];
wannier90bsdata=CreateTBPlotData[blochh,path,{},nbands];
{vaspdata,wannier90bsdata}
];


CompareVaspWannier90Bandstructure3D[wannier90file_,outcarfile_,eigenvalfile_]:=Module[{lattice,reclattice,vaspdata,vasppath,vasppuredata,path,blochh,structureplot,nbands,wannier90bsdata},
{lattice,reclattice}=GetLatticeFromOUTCAR[outcarfile];
{vaspdata,vasppath,vasppuredata}=CreateVaspBandstructurePlotData[eigenvalfile];
path=CreateTBPathfrom3DVaspPath[vasppath,2\[Pi] reclattice];
{blochh,nbands}=BlochMatrix3DFromWannier90[wannier90file,lattice,0];
wannier90bsdata=CreateTBPlotData3D[blochh,path,{},nbands];
{vaspdata,wannier90bsdata}
];


End[]
Protect@@Names["dftanalysis`*"];
EndPackage[]
